package com.ita.softserveinc.achiever.controller;

import java.util.Map;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.ita.softserveinc.achiever.entity.Question;
import com.ita.softserveinc.achiever.entity.Subtopic;
import com.ita.softserveinc.achiever.entity.Topic;
import com.ita.softserveinc.achiever.exception.ElementExistsException;
import com.ita.softserveinc.achiever.service.ISubtopicService;
import com.ita.softserveinc.achiever.service.ITopicService;

/**
 * @author Taras Hrytsko
 *
 */
@Controller
public class SubtopicController {

	private static final Logger logger = LoggerFactory
			.getLogger(QuestionController.class);

	@Autowired
	private ISubtopicService subtopicService;

	@Autowired
	private ITopicService topicService;

	@Autowired
	private TopicController topicController;

	private Subtopic editableSubtopic;

	/**
	 * @param map
	 * @return subtopics
	 */
	@RequestMapping("/subtopics")
	public String listSubtopics(Map<String, Object> map) {
		map.put("subtopic", new Subtopic());
		map.put("subtopicList", subtopicService.findAll());
		return "subtopic/subtopic";
	}

	/**
	 * @param map
	 * @return newsubtopic
	 */
	@RequestMapping("/newsubtopic")
	public String newSubtopic(Map<String, Object> map) {
		map.put("subtopic", new Subtopic());
		map.put("topicList", topicService.findAll());
		return "subtopic/newsubtopic";
	}

	/**
	 * @param subtopic
	 * @param topic
	 * @param result
	 * @return subtopics
	 */
	@RequestMapping(value = "/addSubtopic", method = RequestMethod.POST)
	public String addSubtopic(@ModelAttribute("subtopic") Subtopic subtopic,
			@ModelAttribute("topic") Topic topic, BindingResult result) {
		topic = topicService.findByName(topic.getTopicName());
		try {
			subtopic.setTopic(topicService.findByName(topic.getTopicName()));
			subtopicService.create(subtopic);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/subtopics";
	}

	/**
	 * @param id
	 * @return homepage
	 */
	@RequestMapping("/subtopic/edit/{subtopicId}")
	public String editSubtopic(@PathVariable("subtopicId") Long id,
			Map<String, Object> map) {
		logger.info("/editquestion");
		editableSubtopic = subtopicService.findById(id);
		map.put("subtopic", subtopicService.findById(id));
		map.put("topicList", topicService.findAll());
		return "subtopic/editsubtopic";
	}


	@RequestMapping(value = "/subtopic/edit/editSubtopic", method = RequestMethod.POST)
	public String editQuestion(@Valid @ModelAttribute("topic") Topic topic, 
			@ModelAttribute("subtopic") Subtopic subtopic,
			BindingResult result) {
		if (result.hasErrors()) {
			return "redirect:/editsubtopic";
		}
		if (subtopic.getName().equals(editableSubtopic.getName())
				&& (subtopic.getTopic().equals(editableSubtopic
						.getTopic()))) {
			return "redirect:/questions";
		}
		try {
			editableSubtopic.setName(subtopic.getName());
			editableSubtopic.setTopic(topicService.findByName(topic
					.getTopicName()));
			subtopicService.update(editableSubtopic);
		} catch (ElementExistsException e) {
			result.rejectValue("name", "error.subtopic",
					"this question already exists!");
			return "redirect:/editsubtopic";
		}
		return "redirect:/subtopics";
	}
}
