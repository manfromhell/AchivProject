package com.ita.softserveinc.achiever.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.ita.softserveinc.achiever.entity.Question;
import com.ita.softserveinc.achiever.entity.Subtopic;
import com.ita.softserveinc.achiever.service.IQuestionService;
import com.ita.softserveinc.achiever.service.ISubtopicService;

/**
 * @author Taras Hrytsko
 *
 */
@Controller
public class QuestionController {

	@Autowired
	private IQuestionService questionService;

	@Autowired
	private ISubtopicService subtopicService;

	/**
	 * @param map
	 * @return questions
	 */
	@RequestMapping("/questions")
	public String listQuestions(Map<String, Object> map) {
		map.put("questionList", questionService.findAll());
		return "question";
	}

	/**
	 * @param map
	 * @return newquestion
	 */
	@RequestMapping("/newquestion")
	public String newQuestion(Map<String, Object> map) {
		map.put("question", new Question());
		map.put("subtopicList", subtopicService.findAll());
		return "newquestion";
	}

	/**
	 * @param question
	 * @param subtopic
	 * @param result
	 * @return questions
	 */
	@RequestMapping(value = "/question/add", method = RequestMethod.POST)
	public String addQuestion(@ModelAttribute("question") Question question,
			@ModelAttribute("subtopic") Subtopic subtopic, BindingResult result) {
		question.setSubtopic(subtopicService.findByName(subtopic.getName()));
		try {
			questionService.create(question);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/questions";
	}

	/**
	 * @param id
	 * @return questions
	 */
	@RequestMapping("/question/setsubtopic/{questionId}")
	public String setSubtopic(@PathVariable("questionId") Long id) {

		return "setsubtopic";
	}

	/**
	 * @param id
	 * @return questions
	 */
	@RequestMapping("/question/edit/{questionId}")
	public String editQuestion(@PathVariable("questionId") Long id) {
		Question question = questionService.findById(id);
		try {
			questionService.update(question);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "redirect:/questions";
	}

	/**
	 * @param id
	 * @return questions
	 */
	@RequestMapping("/question/delete/{questionId}")
	public String deleteQuestion(@PathVariable("questionId") Long id) {
		Question question = questionService.findById(id);
		questionService.delete(question);
		return "redirect:/questions";
	}
}
