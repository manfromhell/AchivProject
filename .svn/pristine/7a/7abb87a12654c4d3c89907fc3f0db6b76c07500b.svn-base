package com.ita.softserveinc.achiever.controller;

import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.ita.softserveinc.achiever.entity.Direction;
import com.ita.softserveinc.achiever.entity.Group;
import com.ita.softserveinc.achiever.exception.ElementExistsException;
import com.ita.softserveinc.achiever.exception.InvalidDateException;
import com.ita.softserveinc.achiever.service.IDirectionService;
import com.ita.softserveinc.achiever.service.IGroupService;

/**
 * 
 * @author Andriana
 *
 */
@Controller
public class GroupController {

	@Autowired
	private IGroupService groupService;

	@Autowired
	private IDirectionService directionService;

	private Group editableGroup;

	@RequestMapping("/groups")
	public String listGroups(Map<String, Object> map) {
		map.put("groupList", groupService.findAll());
		return "group";
	}

	@RequestMapping("/newgroup")
	public String newGroup(Map<String, Object> map) {
		map.put("group", new Group());
		map.put("directionList", directionService.findAll());
		return "newgroup";
	}

	@RequestMapping(value = "/addGroup", method = RequestMethod.POST)
	public ModelAndView addGroup(@Valid @ModelAttribute("group") Group group,
			@ModelAttribute("direction") Direction direction,
			BindingResult result) {
		if (result.hasErrors()) {
			return new ModelAndView("redirect:/newgroup");
		}
		try {
			group.setDirection(directionService.findByName(direction.getName()));
			groupService.create(group);
		} catch (ElementExistsException e) {
			result.rejectValue("name", "error.group",
					"this group already exists!");
			return new ModelAndView("redirect:/newgroup");
		} catch (InvalidDateException e) {
			result.rejectValue("start", "error.group",
					"date is not correct!");
			result.rejectValue("end", "error.group",
					"date is not correct!");
			return new ModelAndView("redirect:/newgroup");
		}
		return new ModelAndView("redirect:/groups");
	}

	@RequestMapping(value = "/group/edit/{groupId}")
	public String editGroup(@PathVariable("groupId") Long id,
			Map<String, Object> map) {
		editableGroup = groupService.findById(id);
		map.put("group", groupService.findById(id));
		map.put("directionList", directionService.findAll());
		return "editgroup";
	}

	@RequestMapping(value = "/group/edit/editGroup", method = RequestMethod.POST)
	public ModelAndView editGroup2(@Valid @ModelAttribute("group") Group group,
			@ModelAttribute("direction") Direction direction,
			BindingResult result) {
		if (result.hasErrors()) {
			return new ModelAndView("redirect:/editgroup");
		}
		if (group.getGroupName().equals(editableGroup.getGroupName())
				&& (group.getDirection().equals(editableGroup.getDirection()))) {
			return new ModelAndView("redirect:/groups");
		}
		try {
			editableGroup.setGroupName(group.getGroupName());
			editableGroup.setDirection(directionService.findByName(direction.getName()));
			groupService.update(editableGroup);
		} catch (ElementExistsException e) {
			result.rejectValue("name", "error.group",
					"this group already exists!");
			return new ModelAndView("redirect:/editgroup");
		}
		return new ModelAndView("redirect:/groups");
	}

	@RequestMapping("/group/delete/{groupId}")
	public String deleteGroup(@PathVariable("groupId") Long id) {
		Group group = groupService.findById(id);
		groupService.delete(group);
		return "redirect:/groups";
	}

	@RequestMapping("/group/setdirection/{groupId}")
	public String setDirection(@PathVariable("groupId") Long id) {
		return "setdirection";
	}

}
