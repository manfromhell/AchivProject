package com.ita.softserveinc.achiever.entity;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.Size;

import com.google.common.base.Objects;

/**
 * 
 * @author Ruslan Didyk
 * 
 */
@NamedQueries({
		@NamedQuery(name = "Group.findByName", query = "SELECT g FROM Group g WHERE g.groupName = :name"),
		@NamedQuery(name = "Group.getAll", query = "SELECT g FROM Group g"),
		@NamedQuery(name = "Group.getByDirection", query = "SELECT g FROM Group g WHERE g.direction = :direction") })
@Entity
@Table(name = "GROUPS")
public class Group extends BaseEntity {
	private static final long serialVersionUID = 1L;

	
	@Column(name = "NAME", unique = true, nullable = false)
	@Size(min=1, max=10)
	private String groupName;

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	@OneToMany(mappedBy = "group", cascade=CascadeType.ALL)
	private Set<User> users = new HashSet<User>();

	@ManyToOne
	@JoinColumn(name = "DIRECTION_ID")
	private Direction direction;

	public Group() {
	}

	public Group(String groupName) {
		this.groupName = groupName;
	}

	/**
	 * @return users (type = Set<User>) users in Group
	 */
	public Set<User> getUsers() {
		return Collections.unmodifiableSet(this.users);
	}

	/**
	 * @param user
	 *            (type = User) set new user in Group
	 */
	public void addUser(User user) {
		this.users.add(user);
	}

	/**
	 * @param manyUsers
	 *            (type = Set<User>) set many Users in Group
	 */
	public void addUsers(Set<User> manyUsers) {
		this.users.addAll(manyUsers);
	}

	/**
	 * @param user
	 *            (type = User) delete user from Group
	 */
	public void deleteUser(User user) {
		this.users.remove(user);
	}

	/**
	 * @param manyUsers
	 *            (type = Set<User>) delete some users from Group
	 */
	public void deleteUsers(Set<User> manyUsers) {
		this.users.removeAll(manyUsers);
	}

	/**
	 * delete All users from Group
	 */
	public void deleteAllUsers() {
		this.users.clear();
	}

	/**
	 * @return direction (type = Direction) Group of direction
	 */
	public Direction getDirection() {
		return direction;
	}

	/**
	 * @param direction
	 *            (type = Direction) set direction in Group
	 */
	public void setDirection(Direction direction) {
		this.direction = direction;
	}

	/**
	 * @return result (type - int) hashCode of Group.class
	 */
	@Override
	public int hashCode() {
		return Objects.hashCode(this.groupName, this.direction);
	}

	/**
	 * @param obj
	 *            (type = Object) object whitch we want check for equality
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final Group that = (Group) obj;
		return Objects.equal(this.groupName, that.groupName)
				&& Objects.equal(this.direction, that.direction);
	}

	@Override
	public String toString() {
		return Objects.toStringHelper(this).add("groupName", this.groupName)
				.add("direction", this.direction.getName()).toString();
	}

}
