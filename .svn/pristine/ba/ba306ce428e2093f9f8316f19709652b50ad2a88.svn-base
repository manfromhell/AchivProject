package com.ita.softserveinc.achiever.entity;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.Size;

import com.google.common.base.Objects;

/**
 * 
 * @author Andriana
 *
 */
@Entity
@Table(name = "DIRECTIONS")
@NamedQuery(name = "Direction.findByName", query = "SELECT d FROM Direction d WHERE d.name = :name")
public class Direction extends BaseEntity {

	/**
	 * 
	 */
	private static final long serialVersionUID = -862201817349244293L;

	/**
	 * 
	 */
	@Column(name = "NAME", unique = true, nullable = false)
	@Size(min = 1, max = 10)
	private String name;

	/**
	 * 
	 */
	@OneToMany(mappedBy = "direction", cascade = CascadeType.ALL)
	private Set<Group> groups = new HashSet<Group>();

	/**
	 * 
	 */
	@ManyToMany
	@JoinTable(name = "DIRECTIONS_to_TOPICS", joinColumns = { @JoinColumn(name = "DIRECTION_ID") }, inverseJoinColumns = { @JoinColumn(name = "TOPIC_ID") })
	private Set<Topic> topics = new HashSet<Topic>();

	/**
	 * 
	 */
	public Direction() {

	}

	/**
	 * @param directionName
	 */
	public Direction(String directionName) {
		super();
		this.name = directionName;
	}

	/**
	 * @return the directionName
	 */
	public String getName() {
		return name;
	}

	/**
	 * Sets direction name
	 * 
	 * @param name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the groups
	 */
	public Set<Group> getGroups() {
		return Collections.unmodifiableSet(groups);
	}

	/**
	 * @return the topics
	 */
	public Set<Topic> getTopics() {
		return Collections.unmodifiableSet(topics);
	}

	/**
	 * 
	 */
	@Override
	public int hashCode() {
		return Objects.hashCode(this.name);
	}

	/**
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof Direction)) {
			return false;
		}
		if (this == obj) {
			return true;
		}
		Direction that = (Direction) obj;
		return Objects.equal(this.name, that.name);
	}

	/* 
	 * 
	 */
	@Override
	public String toString() {
		return Objects.toStringHelper(this).add("Name", this.name).toString();
	}

}
